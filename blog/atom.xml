<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://docs.cloudesire.com/blog</id>
    <title>documentation Blog</title>
    <updated>2018-04-18T06:00:00Z</updated>
    <generator>Feed for Node.js</generator>
    <link rel="alternate" href="https://docs.cloudesire.com/blog"/>
    <subtitle>The best place to stay up-to-date with the latest documentation news and events.</subtitle>
    <logo>https://docs.cloudesire.com/img/logo-cloudesire.png</logo>
    <rights>Copyright Â© 2018 Cloudesire.com</rights>
    <entry>
        <title type="html"><![CDATA[Quickly get a logger with IntelliJ live templates]]></title>
        <id>https://docs.cloudesire.com/blog/2018/04/18/intellij-logger-live-template.html</id>
        <link href="https://docs.cloudesire.com/blog/2018/04/18/intellij-logger-live-template.html">
        </link>
        <updated>2018-04-18T06:00:00Z</updated>
        <summary type="html"><![CDATA[<p>IntelliJ IDEA is every Java developer's favourite IDE here at Cloudesire, and amongst its powerful features there are <a href="https://www.jetbrains.com/help/idea/creating-and-editing-live-templates.html">Live templates</a>. Let me show you how they work with a simple example.</p>
<p>Getting a <a href="https://www.slf4j.org/">SLF4J</a> instance for the current class is a matter of typing</p>
<pre><code class="hljs css java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger
</code></pre>
<p>waiting for the import popup to appear, looking for <code>org.slf4j.Logger</code> and selecting it, continue typing</p>
<pre><code class="hljs css java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory
</code></pre>
<p>... another import...</p>
<pre><code class="hljs css java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(
</code></pre>
<p>wait, where am I? Oh, <code>MyObject</code>, sure</p>
<pre><code class="hljs css java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger( MyObject.class );
</code></pre>
<p>done!</p>
<p>I find it a bit slow, don't you? Let's speed it up:</p>
<ul>
<li><p>Open IDEA settings with <code>Ctrl+Alt+S</code> and browse to <code>Editor -&gt; Live Templates</code></p></li>
<li><p>Add a new <strong>Template Group</strong> with <code>Alt+Ins</code>, choose a nice name</p></li>
<li><p>Add a <strong>Live Template</strong> in your newly created group</p></li>
<li><p>Write <code>log</code> in <em>Abbreviation</em></p></li>
<li><p>Paste in <em>Template text</em></p>
<pre><code class="hljs">private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger( $CLASS$.class );
</code></pre></li>
<li><p>Open <strong>Edit variables</strong> and write in the field <em>Expression</em> at the <code>CLASS</code> row</p>
<pre><code class="hljs">className()
</code></pre>
<p>and press OK</p></li>
<li><p>Set the applicable context by clicking on <code>Java</code> in the <strong>No applicable contexts yet. Define</strong> popup</p></li>
</ul>
<p>Exit the settings by pressing OK.</p>
<p>Now you can get a logger for a class just by writing <code>log</code> and pressing <code>Tab</code>! Just 3 keystrokes, isn't it better?</p>
]]></summary>
        <author>
            <name>Matteo Giordano</name>
            <uri>http://twitter.com/malteo</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selling and automated provisioning of Microsoft/Azure products in a SaaS marketplace @ DevOps@Work 2018]]></title>
        <id>https://docs.cloudesire.com/blog/2018/03/27/devops-at-work-2018.html</id>
        <link href="https://docs.cloudesire.com/blog/2018/03/27/devops-at-work-2018.html">
        </link>
        <updated>2018-03-27T06:00:00Z</updated>
        <summary type="html"><![CDATA[<p>This is a presentation I held at the of <a href="https://www.eventbrite.it/e/biglietti-devopswork-2018-41708545382">DevOps@Work
2018</a>
conference.</p>
<blockquote>
<p>Office 365, Azure marketplace and Azure Resource Manager templates selling on
a SaaS marketplace.</p>
</blockquote>
<p><br/></p>
<script async class="speakerdeck-embed" data-id="1f3862137822424d8d24e02847f742e4" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></summary>
        <author>
            <name>Giovanni Toraldo</name>
            <uri>http://twitter.com/gionn</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Continuous Delivery, 5 years later @ Incontro DevOps Italia 2018]]></title>
        <id>https://docs.cloudesire.com/blog/2018/03/15/devops-2018.html</id>
        <link href="https://docs.cloudesire.com/blog/2018/03/15/devops-2018.html">
        </link>
        <updated>2018-03-15T06:00:00Z</updated>
        <summary type="html"><![CDATA[<p>This is a <a href="http://www.incontrodevops.it/sessions/continuous-delivery-5-anni-dopo/">presentation</a> I held at the six edition of &quot;<a href="http://www.incontrodevops.it/">Incontro DevOps Italia</a>&quot; conference.</p>
<blockquote>
<p>How it evolved, and how it continues to evolve the development of the Cloudesire platform, from code to continuous integration, static code analysis, code review processes, automated production provisioning.</p>
</blockquote>
<p><br/></p>
<script async class="speakerdeck-embed" data-id="355a760e1c934032bacb7948a111026f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></summary>
        <author>
            <name>Giovanni Toraldo</name>
            <uri>http://twitter.com/gionn</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Managing GCP Projects with Terraform @ GDG DevFest Pisa 0.1]]></title>
        <id>https://docs.cloudesire.com/blog/2018/03/15/devfest-2018.html</id>
        <link href="https://docs.cloudesire.com/blog/2018/03/15/devfest-2018.html">
        </link>
        <updated>2018-03-15T06:00:00Z</updated>
        <summary type="html"><![CDATA[<p>This is a <a href="https://devfest.gdgpisa.it/schedule/day1?sessionId=158">presentation</a> I held at the first alpha edition of &quot;<a href="https://devfest.gdgpisa.it/">GDG DevFest Pisa</a>&quot; conference.</p>
<blockquote>
<p>Create and evolve simple and complex Google Cloud architectures with your text editor and Terraform.</p>
</blockquote>
<p><br/></p>
<script async class="speakerdeck-embed" data-id="bbde8adde10340dbbcad08b94d6b76f8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></summary>
        <author>
            <name>Giovanni Toraldo</name>
            <uri>http://twitter.com/gionn</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Configure logback log level via environment variables]]></title>
        <id>https://docs.cloudesire.com/blog/2018/03/14/logback.html</id>
        <link href="https://docs.cloudesire.com/blog/2018/03/14/logback.html">
        </link>
        <updated>2018-03-14T06:00:00Z</updated>
        <summary type="html"><![CDATA[<p>If you are running a java application with logback inside a docker container, it may be really useful to interact with logging levels via OS environment variables.</p>
<p>It's simple as declaring a new variable inside your <code>logback.xml</code> file and provide a default value as in the Bash shell, using the &quot;:-&quot; operator.</p>
<pre><code class="hljs css xml"><span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CLOUDESIRE_LOG_LEVEL"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${CLOUDESIRE_LOG_LEVEL:-DEBUG}"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.cloudesire"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${CLOUDESIRE_LOG_LEVEL}"</span>/&gt;</span>
</code></pre>
<p>Then you can simply run your docker container tuning the log level by passing an appropriate value, e.g.: <code>CLOUDESIRE_LOG_LEVEL=WARN</code>.</p>
]]></summary>
        <author>
            <name>Giovanni Toraldo</name>
            <uri>http://twitter.com/gionn</uri>
        </author>
    </entry>
</feed>