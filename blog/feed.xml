<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>documentation Blog</title>
        <link>https://docs.cloudesire.com/blog</link>
        <description>The best place to stay up-to-date with the latest documentation news and events.</description>
        <lastBuildDate>Wed, 29 Aug 2018 06:00:00 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>documentation Blog</title>
            <url>https://docs.cloudesire.com/img/logo-cloudesire.png</url>
            <link>https://docs.cloudesire.com/blog</link>
        </image>
        <copyright>Copyright © 2018 Cloudesire.com</copyright>
        <item>
            <title><![CDATA[Selling and provisioning OpenStack tenants]]></title>
            <link>https://docs.cloudesire.com/blog/2018/08/29/openstack-integration.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/08/29/openstack-integration.html</guid>
            <pubDate>Wed, 29 Aug 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>We're delighted to announce that we started the development of a new marketplace
component to allow the selling of tenants of <a href="https://www.openstack.org/">OpenStack
powered</a> datacenters.</p>
<p>The goal is to give our marketplace customers the opportunity to purchase - and
immediately start to use - cloud resources on the OpenStack instances of our
platform clients.</p>
<p>To achieve this goal, we leveraged the <a href="https://docs.cloudesire.com/docs/syndication.html">syndication
workflow</a> by developing an
integration with the OpenStack API layer. We are currently supporting the latest
Queens release of the 2018 February 28th but we took care to avoid
recently-introduced APIs in order to easily support older OpenStack versions.</p>
<p>To easily install OpenStack on our test environment, we leveraged the
<a href="https://conjure-up.io/">conjure-up</a> tool maintained by Canonical, which allows
to automatically install and configure the most common OpenStack components on
multiple LXC containers on a single node (physical or VM).</p>
<p>At the end of the first development phase, we'll support the self-provisioning
of the OpenStack tenants as a consequence of each purchase of a special
product-type (VDC) which will be available on our marketplace catalog: the
workflow will automatically create a new OpenStack user (tenant), then associate
a new <strong>Project</strong> to him, and finally allocate specific <strong>Resources Quotas</strong>.</p>
<p>In this way, for each <strong>VDC product plan</strong>, the marketplace administrator can
set the minimum and maximum provisionable resources for each tenant, eventually
specifying a <em>prepaid pricing model</em> (e.g. monthly payments plus one-off costs,
plus professional services to be offered bundled with the VDC access).</p>
<p>The next development wave will also support the <strong>pay-per-use</strong> scenario: we’ll
integrate the OpenStack metering APIs in order to collect the actual cloud
resources usage; those metrics will be managed by our billing engine which will
generate (for each customer, at the end of the billing period) the related
invoices listing the consumption costs.</p>
<p>As usual, at the end of each development wave, we’ll publish the state-of-art of
the module on our <a href="https://demo.cloudesire.com">demo marketplace</a>.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Automatically remove unused Docker data with systemd]]></title>
            <link>https://docs.cloudesire.com/blog/2018/08/27/docker-prune-systemd-timer.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/08/27/docker-prune-systemd-timer.html</guid>
            <pubDate>Mon, 27 Aug 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>We use Docker <em>A LOT</em> at Cloudesire, and working intensely with it can leave some cruft in <code>/var/lib/docker</code>.</p>
<p>Fortunately, the Docker CLI supports <a href="https://docs.docker.com/engine/reference/commandline/system_prune/">pruning</a>, which works as a garbage collector for unused objects such as images, containers, volumes, and networks.</p>
<p>You can try it on a terminal with</p>
<pre><code class="hljs">$ docker system prune

WARNING! This will remove:
    - all stopped containers
    - all networks not used by at least one container
    - all dangling images
    - all build cache
Are you sure you want to continue? [y/N] y
Total reclaimed space: 3.145GB
</code></pre>
<p>Not bad!</p>
<p>I'd like to automate this though...  Let's configure a systemd timer to schedule pruning on a weekly basis.</p>
<p>systemd will look for user services inside <code>~/.config/systemd/user/</code>, so let's create it</p>
<pre><code class="hljs">mkdir -p ~/.config/systemd/user
</code></pre>
<p>Enter the new directory and create two files, <code>docker-prune.service</code></p>
<pre><code class="hljs">[Unit]
<span class="hljs-attribute">Description</span>=Prune unused Docker images

[Service]
<span class="hljs-attribute">Type</span>=simple
<span class="hljs-attribute">ExecStart</span>=/usr/bin/docker<span class="hljs-built_in"> system </span>prune --force

[Install]
<span class="hljs-attribute">WantedBy</span>=default.target
</code></pre>
<p>and <code>docker-prune.timer</code></p>
<pre><code class="hljs"><span class="hljs-section">[Unit]</span>
<span class="hljs-attr">Description</span>=Prune unused Docker images weekly
<span class="hljs-attr">RefuseManualStart</span>=<span class="hljs-literal">no</span>
<span class="hljs-attr">RefuseManualStop</span>=<span class="hljs-literal">no</span>
<span class="hljs-section">
[Timer]</span>
<span class="hljs-attr">Persistent</span>=<span class="hljs-literal">false</span>
<span class="hljs-attr">OnBootSec</span>=<span class="hljs-number">80</span>
<span class="hljs-attr">OnCalendar</span>=weekly
<span class="hljs-attr">Unit</span>=docker-prune.service
<span class="hljs-section">
[Install]</span>
<span class="hljs-attr">WantedBy</span>=timers.target
</code></pre>
<p>start and enable our new timer</p>
<pre><code class="hljs">systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">start</span> docker-prune.timer
systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">enable</span> docker-prune.timer
</code></pre>
<p>systemd will cleanup Docker leftovers every week!</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Quickly get a logger with IntelliJ live templates]]></title>
            <link>https://docs.cloudesire.com/blog/2018/04/18/intellij-logger-live-template.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/04/18/intellij-logger-live-template.html</guid>
            <pubDate>Wed, 18 Apr 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>IntelliJ IDEA is every Java developer's favourite IDE here at Cloudesire, and amongst its powerful features there are <a href="https://www.jetbrains.com/help/idea/creating-and-editing-live-templates.html">Live templates</a>. Let me show you how they work with a simple example.</p>
<p>Getting a <a href="https://www.slf4j.org/">SLF4J</a> instance for the current class is a matter of typing</p>
<pre><code class="hljs css languages- java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger
</code></pre>
<p>waiting for the import popup to appear, looking for <code>org.slf4j.Logger</code> and selecting it, continue typing</p>
<pre><code class="hljs css languages- java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory
</code></pre>
<p>... another import...</p>
<pre><code class="hljs css languages- java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(
</code></pre>
<p>wait, where am I? Oh, <code>MyObject</code>, sure</p>
<pre><code class="hljs css languages- java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger( MyObject.class );
</code></pre>
<p>done!</p>
<p>I find it a bit slow, don't you? Let's speed it up:</p>
<ul>
<li><p>Open IDEA settings with <code>Ctrl+Alt+S</code> and browse to <code>Editor -&gt; Live Templates</code></p></li>
<li><p>Add a new <strong>Template Group</strong> with <code>Alt+Ins</code>, choose a nice name</p></li>
<li><p>Add a <strong>Live Template</strong> in your newly created group</p></li>
<li><p>Write <code>log</code> in <em>Abbreviation</em></p></li>
<li><p>Paste in <em>Template text</em></p>
<pre><code class="hljs">private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger( $CLASS$.class );
</code></pre></li>
<li><p>Open <strong>Edit variables</strong> and write in the field <em>Expression</em> at the <code>CLASS</code> row</p>
<pre><code class="hljs">className()
</code></pre>
<p>and press OK</p></li>
<li><p>Set the applicable context by clicking on <code>Java</code> in the <strong>No applicable contexts yet. Define</strong> popup</p></li>
</ul>
<p>Exit the settings by pressing OK.</p>
<p>Now you can get a logger for a class just by writing <code>log</code> and pressing <code>Tab</code>! Just 3 keystrokes, isn't it better?</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Selling and automated provisioning of Microsoft/Azure products in a SaaS marketplace @ DevOps@Work 2018]]></title>
            <link>https://docs.cloudesire.com/blog/2018/03/27/devops-at-work-2018.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/03/27/devops-at-work-2018.html</guid>
            <pubDate>Tue, 27 Mar 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>This is a presentation I held at the of <a href="https://www.eventbrite.it/e/biglietti-devopswork-2018-41708545382">DevOps@Work
2018</a>
conference.</p>
<blockquote>
<p>Office 365, Azure marketplace and Azure Resource Manager templates selling on
a SaaS marketplace.</p>
</blockquote>
<p><br/></p>
<script async class="speakerdeck-embed" data-id="1f3862137822424d8d24e02847f742e4" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></description>
        </item>
        <item>
            <title><![CDATA[Continuous Delivery, 5 years later @ Incontro DevOps Italia 2018]]></title>
            <link>https://docs.cloudesire.com/blog/2018/03/15/devops-2018.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/03/15/devops-2018.html</guid>
            <pubDate>Thu, 15 Mar 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>This is a <a href="http://www.incontrodevops.it/sessions/continuous-delivery-5-anni-dopo/">presentation</a> I held at the six edition of &quot;<a href="http://www.incontrodevops.it/">Incontro DevOps Italia</a>&quot; conference.</p>
<blockquote>
<p>How it evolved, and how it continues to evolve the development of the Cloudesire platform, from code to continuous integration, static code analysis, code review processes, automated production provisioning.</p>
</blockquote>
<p><br/></p>
<script async class="speakerdeck-embed" data-id="355a760e1c934032bacb7948a111026f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></description>
        </item>
        <item>
            <title><![CDATA[Managing GCP Projects with Terraform @ GDG DevFest Pisa 0.1]]></title>
            <link>https://docs.cloudesire.com/blog/2018/03/15/devfest-2018.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/03/15/devfest-2018.html</guid>
            <pubDate>Thu, 15 Mar 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>This is a <a href="https://devfest.gdgpisa.it/schedule/day1?sessionId=158">presentation</a> I held at the first alpha edition of &quot;<a href="https://devfest.gdgpisa.it/">GDG DevFest Pisa</a>&quot; conference.</p>
<blockquote>
<p>Create and evolve simple and complex Google Cloud architectures with your text editor and Terraform.</p>
</blockquote>
<p><br/></p>
<script async class="speakerdeck-embed" data-id="bbde8adde10340dbbcad08b94d6b76f8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></description>
        </item>
        <item>
            <title><![CDATA[Configure logback log level via environment variables]]></title>
            <link>https://docs.cloudesire.com/blog/2018/03/14/logback.html</link>
            <guid>https://docs.cloudesire.com/blog/2018/03/14/logback.html</guid>
            <pubDate>Wed, 14 Mar 2018 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>If you are running a java application with logback inside a docker container, it may be really useful to interact with logging levels via OS environment variables.</p>
<p>It's simple as declaring a new variable inside your <code>logback.xml</code> file and provide a default value as in the Bash shell, using the &quot;:-&quot; operator.</p>
<pre><code class="hljs css languages- xml"><span class="hljs-tag">&lt;<span class="hljs-name">variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"CLOUDESIRE_LOG_LEVEL"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${CLOUDESIRE_LOG_LEVEL:-DEBUG}"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.cloudesire"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${CLOUDESIRE_LOG_LEVEL}"</span>/&gt;</span>
</code></pre>
<p>Then you can simply run your docker container tuning the log level by passing an appropriate value, e.g.: <code>CLOUDESIRE_LOG_LEVEL=WARN</code>.</p>
]]></description>
        </item>
    </channel>
</rss>